unit UIMG;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, cxContainer, cxEdit, System.Actions, Vcl.ActnList,
  cxImage, DB, Vcl.ExtCtrls;

type
    RImage = record
    ID:Integer;
    Name:String;
    Code:string;
    IMG:TMemoryStream;
    TimerON:Boolean;
    Time:Integer;
    IDX:Integer;
    SubIDX:Integer;
    procedure add;
  end;

 ArrImage= Array of RImage;

  TFIMG = class(TForm)
    cxImage1: TcxImage;
    Timer1: TTimer;
    procedure FormShow(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    function FindImage(Code:String):ArrImage;
    procedure AvialableCom(Text:String);
    procedure Timer1Timer(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;
var
  FIMG: TFIMG;
  ImageControler:array of RImage;
  FindedImage:ArrImage;
  DefImage:RImage;
  NumImage:Integer;

  TimerExec:Boolean;
  TimerImg:RImage;

implementation
uses UFirstAvenger, PortUnit;

{$R *.dfm}
procedure RImage.add;
var num:Integer;
//MS:TMemoryStream;
begin
 SetLength(ImageControler, Length(ImageControler)+1);
 num:=High(ImageControler);
 ImageControler[num].ID := FMain.IBTActions.FieldByName('ID').AsInteger;
 ImageControler[num].Name := FMain.IBTActions.FieldByName('NAME').AsString;
 ImageControler[num].Code := FMain.IBTActions.FieldByName('CODE').AsString;
 ImageControler[num].IDX := FMain.IBTActions.FieldByName('IDX').AsInteger;
// MS := TMemoryStream.Create;
 ImageControler[num].IMG := TMemoryStream.Create;
 TBlobField(FMain.IBTActions.FieldByName('BODY')).SaveToStream(ImageControler[num].IMG);
 if FMain.IBTActions.FieldByName('isTimer').AsInteger = 0
 then ImageControler[num].TimerON := false
 else ImageControler[num].TimerON := True;
 ImageControler[num].Time :=FMain.IBTActions.FieldByName('TimerTime').AsInteger; // GO TO
 ImageControler[num].SubIDX := FMain.IBTActions.FieldByName('SubIDX').AsInteger;; // GO TO
// FreeAndNil(MS);
end;

procedure TFIMG.FormCreate(Sender: TObject);
begin
  SetLength(ImageControler, 0);
  NumImage:=0;
end;

procedure TFIMG.FormShow(Sender: TObject);
var i:Integer;
defAction:TAction;
begin
 FMain.IBTActions.First;
 while not FMain.IBTActions.Eof do
 begin
  DefImage.add;
  FMain.IBTActions.Next;
 end;
 Timer1.Enabled := True;
end;

procedure TFIMG.Timer1Timer(Sender: TObject);
begin
 TimerImg.IMG.SaveToFile('C:\1.jpg');
 cxImage1.Picture.LoadFromFile('C:\1.jpg');
 TimerExec := true;
end;

procedure TFIMG.AvialableCom(Text: String);
var Img:ArrImage;
i:Integer;
begin
 if Text <> '' then
  begin
   Img := FindImage(Text);
   if Length(Img) = 0 then Exit;
   if Length(Img) = 1 then
   begin
    Img[0].IMG.SaveToFile('C:\1.jpg');
    cxImage1.Picture.LoadFromFile('C:\1.jpg');
   end
   else
   begin
    for I := Low(Img) to High(Img) do
    begin
     TimerExec:= false;
     Timer1.Enabled := false;
     Timer1.Interval := TimerImg.Time * 1000;
     Timer1.Enabled := true;
     TimerImg := Img[i];
     while not TimerExec do
      begin
       // ждём пока таймер закончится
       Application.ProcessMessages;
      end;
    end;
   end;
  end;
end;

function TFIMG.FindImage(Code:String):ArrImage;
var i :Integer;
begin
  for i := Low(ImageControler) to High(ImageControler) do
   begin
     if UpperCase(ImageControler[i].Code) = UpperCase(Code) then
      begin
        SetLength(Result, Length(Result) + 1);
        Result[High(Result)] := ImageControler[i];
      end;
   end;

end;

end.
